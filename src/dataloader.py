from typing import Callable, Tuple
import torch
from torch.utils.data import DataLoader
from torch.utils.data.dataloader import default_collate

from .dataset_builder import CloudDataset


# TODO: check if nomenclature of noise parameter is correct
class NoisifyDataloader(DataLoader):
    """
    Class that noisifies the last frame of a dataloader by applying
    a noise function, after collating the batch.
    """
    def __init__(
        self,
        dataset: CloudDataset,
        *args,
        noise_function: Callable[[torch.FloatTensor], torch.FloatTensor] = None,
        **kwargs
        ) -> None:
        """
        Initialize a NoisifyDataloader.

        Parameters
        ----------
        dataset : CloudDataset
            The dataset used to create the dataloader.
        noise_function : (FloatTensor) -> FloatTensor
            The function that noisifies the last frame of a sequence, by
            default None. If None, the default noise function is used.
        """
        if noise_function is None:
            noise_function = self.__get_nosify_ddpm()

        super().__init__(
            dataset,
            *args,
            collate_fn=self.__get_noisify_collate_fn(noise_function),
            **kwargs)

    @staticmethod
    def __get_nosify_ddpm() -> Callable[[torch.FloatTensor], Tuple[torch.FloatTensor, torch.FloatTensor, torch.FloatTensor]]:
        """
        Get the default noise function.

        Returns
        -------
        (FloatTensor) -> (FloatTensor, FloatTensor, FloatTensor)
            The default noise function.
        """
        ## DDPM params
        ## From fastai V2 Course DDPM notebooks
        BETAMIN, BETAMAX, N_STEPS = .0001, .02, 1_000
        beta = torch.linspace(BETAMIN, BETAMAX, N_STEPS)
        alpha = 1. - beta
        alphabar = alpha.cumprod(dim=0)
        # TODO: not used?
        sigma = beta.sqrt()

        def _noisify_ddpm(x0: torch.FloatTensor) -> Tuple[torch.FloatTensor, torch.FloatTensor, torch.FloatTensor]:
            """
            The default noise function.

            Parameters
            ----------
            x0 : FloatTensor
                The last frame of a sequence of frames to be noisified.

            Returns
            -------
            FloatTensor
                The noisified last frame.
            FloatTensor
                The temperature of the noise.
            FloatTensor
                The entropy of the noise.
            """
            device = x0.device
            n = len(x0)
            t = torch.randint(0, N_STEPS, (n,), dtype=torch.long)
            ε = torch.randn(x0.shape, device=device)
            ᾱ_t = alphabar[t].reshape(-1, 1, 1, 1, 1).to(device)
            xt = ᾱ_t.sqrt() * x0 + (1-ᾱ_t).sqrt() * ε
            return xt, t.to(device), ε

        return _noisify_ddpm

    @staticmethod
    def __noisify_last_frame(
        frames: torch.FloatTensor,
        noise_function: Callable[[torch.FloatTensor], Tuple[torch.FloatTensor, torch.FloatTensor, torch.FloatTensor]]
        ) -> Tuple[torch.FloatTensor, torch.FloatTensor, torch.FloatTensor]:
        """
        Nosify the last frame of a sequence of frames. The noise is generated by
        the noise function. the temperature and entropy of the noise are also
        returned. The noise is concatenated to the sequence of previous frames.

        Parameters
        ----------
        frames : FloatTensor
            The sequence of frames of shape (B, T, C, H, W), where B is the batch
            size, T is the sequence length, C is the number of channels, H is the
            height and W is the width.
        noise_function : (FloatTensor) -> (FloatTensor, FloatTensor, FloatTensor)
            The function that generates the noise.

        Returns
        -------
        FloatTensor
            The sequence of frames with the noise concatenated to the last frame.
        FloatTensor
            The temperature of the noise.
        FloatTensor
            The entropy of the noise.
        """
        b, t, _, h, w = frames.shape
        past_frames = frames[:,:-1]
        last_frame  = frames[:,-1:]
        past_frames = past_frames.reshape(b, -1, h, w) # reshape, timesteps reshaped to channels
        noise, t, e = noise_function(last_frame)
        noise = noise[:,:,0,:,:]
        noise_frames = torch.cat([past_frames, noise], dim=1)
        return noise_frames, t, e

    @staticmethod
    def __get_noisify_collate_fn(
        noise_function: Callable[[torch.FloatTensor], torch.FloatTensor]
        ) -> Callable[[torch.FloatTensor], Tuple[torch.FloatTensor, torch.FloatTensor, torch.FloatTensor]]:
        """
        Get a collate function that noisifies the last frame of a batch and
        returns the temperature and entropy of the noise.

        Parameters
        ----------
        noise_function : (FloatTensor) -> (FloatTensor, FloatTensor, FloatTensor)
            The function that noisifies the last frame of a sequence and
            returns the temperature and entropy of the noise.

        Returns
        -------
        (FloatTensor) -> (FloatTensor, FloatTensor, FloatTensor)
            The collate function that noisifies the last frame of a batch and
            returns the temperature and entropy of the noise.
        """
        #def _inner(b):
        #    return noisify_last_frame(default_collate(b), noise_func)
        return lambda batch: NoisifyDataloader.__noisify_last_frame(
            default_collate(batch), noise_function)
